-- QUESTÃO 11 PROVA:
GO
CREATE TRIGGER tr_VerificarDublicidade
ON FUNCIONARIO
INSTEAD OF INSERT
AS
BEGIN
	-- DECLARANDO VARIAVEIS
	DECLARE 
		@NOME VARCHAR(15), 
		@SOBRENOME VARCHAR(15),
		@DATANASCI DATE; 
	SELECT 
		@NOME = PNOME,
		@SOBRENOME = UNOME , 
		@DATANASCI = DATANASC 

	FROM inserted;
	-- VERIFICAR NO BANCO A EXISTENCIA DE DADOS DUPLICADOS
	IF EXISTS(
	SELECT 1 
	FROM FUNCIONARIO 
	WHERE Pnome = @NOME
	AND
	Unome = @SOBRENOME
	AND
	Datanasc = @DATANASCI
	)
	BEGIN
		--PRINT('EXISTE DADOS DUPLICADOS DENTRO DO BANCO DE DADOS');
		--ROLLBACK;
		RAISERROR('EXISTE DADOS DUPLICADOS DENTRO DO BANCO DE DADOS',1,16);
	END
	ELSE 
		INSERT INTO FUNCIONARIO SELECT * FROM inserted;
END
GO

SELECT * FROM FUNCIONARIO ORDER BY Pnome;
INSERT INTO FUNCIONARIO VALUES ( 'Roger', 'R', 'Banks', '05027613008', '1955-12-08', 'Rua da Lapa, 34, São Paulo, SP', 'M', 40000, '05027613008' , 5 );
INSERT INTO FUNCIONARIO VALUES ( 'Roger', 'R', 'Silva', '05027613028', '1955-12-08', 'Rua da Lapa, 34, São Paulo, SP', 'M', 40000, '05027613028' , 5 );
-- QUESTÃO 12 PROVA:
GO
CREATE TABLE FUNCIONARIO_LOG(
	LogID INT PRIMARY KEY IDENTITY(1,1),
	Operacao VARCHAR(10),
	DataHora DATETIME,
	Pnome VARCHAR (15),
	Unome VARCHAR (15),
	Datanasc DATE , 
	Endereco VARCHAR(225),
	Sexo VARCHAR(1),
	Salario DECIMAL(10,2)
);
GO
-- TRIGGER INSERT
CREATE TRIGGER Tr_Funcionario_Inserte_log
ON FUNCIONARIO
AFTER INSERT
AS 
BEGIN
	INSERT INTO FUNCIONARIO_LOG 
	(Operacao,DataHora,
	Pnome,Unome,Datanasc,
	Endereco,Sexo,Salario)
	SELECT  'INSERT' , GETDATE(), Pnome,Unome,Datanasc,Endereco,Sexo,Salario
	FROM inserted;
END
GO

SELECT * FROM FUNCIONARIO ORDER BY Pnome;
INSERT INTO FUNCIONARIO VALUES ( 'Roger', 'R', 'Banks', '05027613008', '1955-12-08', 'Rua da Lapa, 34, São Paulo, SP', 'M', 40000, '05027613008' , 5 );
SELECT * FROM FUNCIONARIO_LOG ORDER BY LogID;


-- DELETE 

GO
CREATE TRIGGER Tr_Funcionario_Delete_log
ON FUNCIONARIO
AFTER DELETE
AS 
BEGIN
	INSERT INTO FUNCIONARIO_LOG 
	(Operacao,DataHora,
	Pnome,Unome,Datanasc,
	Endereco,Sexo,Salario)
	SELECT  'DELETE' , GETDATE(), Pnome,Unome,Datanasc,Endereco,Sexo,Salario
	FROM deleted;
END
GO

SELECT * FROM FUNCIONARIO_LOG ORDER BY LogID;
DELETE FROM FUNCIONARIO WHERE CPF = '05027613008';
SELECT * FROM FUNCIONARIO ORDER BY Pnome;

--UPDATE
GO
CREATE TRIGGER Tr_Funcionario_Update_log
ON FUNCIONARIO
AFTER UPDATE
AS 
BEGIN
	INSERT INTO FUNCIONARIO_LOG 
	(Operacao,DataHora,
	Pnome,Unome,Datanasc,
	Endereco,Sexo,Salario)
	SELECT  'UPDATE' , GETDATE(), Pnome,Unome,Datanasc,Endereco,Sexo,Salario
	FROM deleted; -- INFO ANTIGAS QUE FORAM SUBISTITUIDAS
	-- FROM INSTERTED CONTEM OS NOVOS VALORES APOS ATUALIZAÇÃO
END
GO

SELECT * FROM FUNCIONARIO_LOG ORDER BY LogID;
UPDATE FUNCIONARIO SET Unome = 'Da Silva' WHERE Cpf = '12345678966';
SELECT * FROM FUNCIONARIO ORDER BY Pnome;
-- QUESTÃO 13 PROVA:
GO
CREATE TRIGGER Tr_Delete_Funcionario
ON FUNCIONARIO
INSTEAD OF DELETE 
AS 
BEGIN
	--DECLARE @CPF VARCHAR (11);
	--SELECT @CPF = Cpf FROM deleted;
	-- DELETANDO DEPENDENTES
	DELETE FROM DEPENDENTE WHERE Fcpf IN (SELECT CPF FROM deleted)
	-- ATUALIZANDO O CAMPO SUPERVISOR
	UPDATE FUNCIONARIO SET Cpf_supervisor = NULL
	WHERE Cpf_supervisor IN (SELECT Cpf FROM deleted);
	-- ATUALIZANDO GERENCIA DE DEPARTAMENTO
	UPDATE DEPARTAMENTO SET Cpf_gerente = NULL
	WHERE Cpf_gerente IN (SELECT Cpf FROM deleted);
	DELETE FROM TRABALHA_EM WHERE Fcpf IN (SELECT Cpf FROM deleted); 
	-- DELETANDO FUNCIONARIO 
	DELETE FROM FUNCIONARIO WHERE Cpf IN (SELECT Cpf FROM deleted); 
END
GO

SELECT * FROM FUNCIONARIO ORDER BY Pnome;
DELETE FROM FUNCIONARIO WHERE Cpf = '88866555576';
DELETE FROM FUNCIONARIO WHERE Cpf = '98765432168';
SELECT * FROM FUNCIONARIO_LOG ORDER BY  LogID;
-- QUESTÃO 14 PROVA:
GO
CREATE PROCEDURE sp_Add_Funcionario
(
	@cpf VARCHAR(11),
	@Pnome VARCHAR(15),
	@Unome VARCHAR(15),
	@Datanasc DATE,
	@Endereco VARCHAR(255),
	@Sexo VARCHAR(1),
	@Salario DECIMAL(10,2),
	@Supervisor VARCHAR(11) = NULL,
	@Dnr INT
)
AS
BEGIN
	INSERT INTO 
	FUNCIONARIO(Cpf,Pnome,Unome,Datanasc,Endereco,Sexo,Salario,Cpf_supervisor,Dnr)
	VALUES 
	(@cpf,@Pnome,@Unome,@Datanasc,@Endereco,@Sexo,@Salario,@Supervisor,@Dnr)
	PRINT 'FUNCIONARIO INSERIDO COM SUCESSO'
END
GO

EXEC sp_Add_Funcionario
	@cpf = '12345085',
	@Pnome = 'João',
	@Unome = 'Silva',
	@Datanasc = '1990-01-01',
	@Endereco = 'Rua abc,123',
	@Sexo = 'M',
	@Salario = 3000.00,
	@Dnr = 5;

SELECT * FROM FUNCIONARIO ORDER BY Pnome;
GO
-- QUESTÃO 15 PROVA:

CREATE PROCEDURE sp_Aumento_Salario
(
	@Porcentagem DECIMAL (5,2),
	@Dnome VARCHAR (15)
)
AS
BEGIN
	UPDATE FUNCIONARIO
	SET Salario = Salario + Salario *(@Porcentagem/100)
	WHERE Dnr IN (SELECT Dnumero FROM DEPARTAMENTO WHERE Dnome = @Dnome)
	PRINT 'SALARIO ALTERADO COM SUCESSO';
END
GO

SELECT * FROM FUNCIONARIO 
INNER JOIN DEPARTAMENTO
ON Dnr = Dnumero
ORDER BY Dnr;

EXEC sp_Aumento_Salario
	@Porcentagem = 10,
	@Dnome = 'Pesquisa';

SELECT * FROM FUNCIONARIO_LOG ORDER BY Pnome;